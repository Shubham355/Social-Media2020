{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Desktop/Socialmedia_MERN/client/src/components/searchbar/index.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst SearchBar = ({\n  profiles\n}) => {\n  // const [word, setWord] = useState('');\n  // const [filterDisplay, setFilterDisplay] = useState(null);\n  // const handleChange = (e) => {\n  //   console.log(e, 'searched');\n  //   let oldList = profiles.map((profile) => {\n  //     if (profile.user !== null) {\n  //       return { name: profile.user.name, avatar: profile.user.avatar };\n  //     }\n  //   });\n  //   oldList = oldList.filter((list) => list !== undefined);\n  //   if (e !== '') {\n  //     // console.log(oldList);\n  //     let newList = [];\n  //     setWord(e);\n  //     newList = oldList.filter((list) => {\n  //       let splittedName = list.name.split(' ');\n  //       console.log(splittedName, 'hello');\n  //       if (splittedName.length === 1) {\n  //         // splittedName = splittedName.split('');\n  //         console.log(splittedName, 'hello1');\n  //         console.log(word, 'check');\n  //         return splittedName[0].toLowerCase().includes(word.toLowerCase());\n  //       }\n  //       if (splittedName.length > 1) {\n  //         console.log(list.name.toLowerCase().includes(word.toLowerCase()));\n  //         return list.name.toLowerCase().includes(word.toLowerCase());\n  //       }\n  //     });\n  //     setFilterDisplay(newList);\n  //     console.log(filterDisplay);\n  //   } else {\n  //     setFilterDisplay(null);\n  //   }\n  // };\n\n  /*list of available options*/\n  var n = tags.length; //length of datalist tags\n\n  function ac(value) {\n    document.getElementById('datalist').innerHTML = ''; //setting datalist empty at the start of function\n    //if we skip this step, same name will be repeated\n\n    l = value.length; //input query length\n\n    for (var i = 0; i < n; i++) {\n      if (tags[i].toLowerCase().indexOf(value.toLowerCase()) > -1) {\n        //comparing if input string is existing in tags[i] string\n        var node = document.createElement('option');\n        var val = document.createTextNode(tags[i]);\n        node.appendChild(val);\n        document.getElementById('datalist').appendChild(node); //creating and appending new elements in data list\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"searchWrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"input-icons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-search icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"searchBar\",\n    type: \"text\",\n    placeholder: \"Search\" // onChange={(e) => handleChange(e.target.value)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"match-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }));\n};\n\nSearchBar.propTypes = {\n  profiles: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profiles: state.profile.profiles\n});\n\nexport default connect(mapStateToProps)(SearchBar);","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/client/src/components/searchbar/index.js"],"names":["React","useState","PropTypes","connect","SearchBar","profiles","n","tags","length","ac","value","document","getElementById","innerHTML","l","i","toLowerCase","indexOf","node","createElement","val","createTextNode","appendChild","propTypes","object","isRequired","mapStateToProps","state","profile"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAClC;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAEA,MAAIC,CAAC,GAAGC,IAAI,CAACC,MAAb,CAhDkC,CAgDb;;AAErB,WAASC,EAAT,CAAYC,KAAZ,EAAmB;AACjBC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,SAApC,GAAgD,EAAhD,CADiB,CAEjB;AACA;;AAEAC,IAAAA,CAAC,GAAGJ,KAAK,CAACF,MAAV,CALiB,CAMjB;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,CAApB,EAAuBS,CAAC,EAAxB,EAA4B;AAC1B,UAAIR,IAAI,CAACQ,CAAD,CAAJ,CAAQC,WAAR,GAAsBC,OAAtB,CAA8BP,KAAK,CAACM,WAAN,EAA9B,IAAqD,CAAC,CAA1D,EAA6D;AAC3D;AAEA,YAAIE,IAAI,GAAGP,QAAQ,CAACQ,aAAT,CAAuB,QAAvB,CAAX;AACA,YAAIC,GAAG,GAAGT,QAAQ,CAACU,cAAT,CAAwBd,IAAI,CAACQ,CAAD,CAA5B,CAAV;AACAG,QAAAA,IAAI,CAACI,WAAL,CAAiBF,GAAjB;AAEAT,QAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCU,WAApC,CAAgDJ,IAAhD,EAP2D,CAQ3D;AACD;AACF;AACF;;AAED,sBACE;AAAK,IAAA,EAAE,EAAC,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AACE,IAAA,EAAE,EAAC,WADL;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,QAHd,CAIE;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,eAUE;AAAK,IAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAcD,CArFD;;AAuFAd,SAAS,CAACmB,SAAV,GAAsB;AACpBlB,EAAAA,QAAQ,EAAEH,SAAS,CAACsB,MAAV,CAAiBC;AADP,CAAtB;;AAIA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCtB,EAAAA,QAAQ,EAAEsB,KAAK,CAACC,OAAN,CAAcvB;AADU,CAAZ,CAAxB;;AAIA,eAAeF,OAAO,CAACuB,eAAD,CAAP,CAAyBtB,SAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst SearchBar = ({ profiles }) => {\n  // const [word, setWord] = useState('');\n\n  // const [filterDisplay, setFilterDisplay] = useState(null);\n\n  // const handleChange = (e) => {\n  //   console.log(e, 'searched');\n  //   let oldList = profiles.map((profile) => {\n  //     if (profile.user !== null) {\n  //       return { name: profile.user.name, avatar: profile.user.avatar };\n  //     }\n  //   });\n\n  //   oldList = oldList.filter((list) => list !== undefined);\n\n  //   if (e !== '') {\n  //     // console.log(oldList);\n\n  //     let newList = [];\n\n  //     setWord(e);\n\n  //     newList = oldList.filter((list) => {\n  //       let splittedName = list.name.split(' ');\n  //       console.log(splittedName, 'hello');\n  //       if (splittedName.length === 1) {\n  //         // splittedName = splittedName.split('');\n  //         console.log(splittedName, 'hello1');\n  //         console.log(word, 'check');\n  //         return splittedName[0].toLowerCase().includes(word.toLowerCase());\n  //       }\n\n  //       if (splittedName.length > 1) {\n  //         console.log(list.name.toLowerCase().includes(word.toLowerCase()));\n  //         return list.name.toLowerCase().includes(word.toLowerCase());\n  //       }\n  //     });\n\n  //     setFilterDisplay(newList);\n\n  //     console.log(filterDisplay);\n  //   } else {\n  //     setFilterDisplay(null);\n  //   }\n  // };\n\n  /*list of available options*/\n\n  var n = tags.length; //length of datalist tags\n\n  function ac(value) {\n    document.getElementById('datalist').innerHTML = '';\n    //setting datalist empty at the start of function\n    //if we skip this step, same name will be repeated\n\n    l = value.length;\n    //input query length\n    for (var i = 0; i < n; i++) {\n      if (tags[i].toLowerCase().indexOf(value.toLowerCase()) > -1) {\n        //comparing if input string is existing in tags[i] string\n\n        var node = document.createElement('option');\n        var val = document.createTextNode(tags[i]);\n        node.appendChild(val);\n\n        document.getElementById('datalist').appendChild(node);\n        //creating and appending new elements in data list\n      }\n    }\n  }\n\n  return (\n    <div id='searchWrapper'>\n      <div class='input-icons'>\n        <i className='fas fa-search icon' />\n        <input\n          id='searchBar'\n          type='text'\n          placeholder='Search'\n          // onChange={(e) => handleChange(e.target.value)}\n        />\n      </div>\n      <div id='match-list'></div>\n    </div>\n  );\n};\n\nSearchBar.propTypes = {\n  profiles: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  profiles: state.profile.profiles,\n});\n\nexport default connect(mapStateToProps)(SearchBar);\n"]},"metadata":{},"sourceType":"module"}