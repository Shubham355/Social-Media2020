{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst select_fields_1 = require(\"../select-fields\");\n\nconst base_1 = require(\"../base\");\n\nconst context_1 = require(\"../context\");\n\nclass ContextRunnerImpl {\n  constructor(builderOrContext, selectFields = select_fields_1.selectFields) {\n    this.builderOrContext = builderOrContext;\n    this.selectFields = selectFields;\n  }\n\n  async run(req, options = {}) {\n    const context = this.builderOrContext instanceof context_1.Context ? this.builderOrContext : this.builderOrContext.build();\n    const instances = this.selectFields(req, context.fields, context.locations);\n    context.addFieldInstances(instances);\n    const haltedInstances = new Set();\n\n    for (const contextItem of context.stack) {\n      const promises = context.getData({\n        requiredOnly: true\n      }).map(async instance => {\n        const {\n          location,\n          path\n        } = instance;\n        const instanceKey = `${location}:${path}`;\n\n        if (haltedInstances.has(instanceKey)) {\n          return;\n        }\n\n        try {\n          await contextItem.run(context, instance.value, {\n            req,\n            location,\n            path\n          }); // An instance is mutable, so if an item changed its value, there's no need to call getData again\n\n          const newValue = instance.value; // Checks whether the value changed.\n          // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\n\n          const reqValue = path !== '' ? _.get(req[location], path) : req[location];\n\n          if (!options.dryRun && reqValue !== instance.value) {\n            path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\n          }\n        } catch (e) {\n          if (e instanceof base_1.ValidationHalt) {\n            haltedInstances.add(instanceKey);\n            return;\n          }\n\n          throw e;\n        }\n      });\n      await Promise.all(promises);\n    }\n\n    if (!options.dryRun) {\n      const internalReq = req;\n      internalReq[base_1.contextsKey] = (internalReq[base_1.contextsKey] || []).concat(context);\n    }\n\n    return context;\n  }\n\n}\n\nexports.ContextRunnerImpl = ContextRunnerImpl;","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/node_modules/express-validator/src/chain/context-runner-impl.js"],"names":["Object","defineProperty","exports","value","_","require","select_fields_1","base_1","context_1","ContextRunnerImpl","constructor","builderOrContext","selectFields","run","req","options","context","Context","build","instances","fields","locations","addFieldInstances","haltedInstances","Set","contextItem","stack","promises","getData","requiredOnly","map","instance","location","path","instanceKey","has","newValue","reqValue","get","dryRun","set","e","ValidationHalt","add","Promise","all","internalReq","contextsKey","concat"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst select_fields_1 = require(\"../select-fields\");\nconst base_1 = require(\"../base\");\nconst context_1 = require(\"../context\");\nclass ContextRunnerImpl {\n    constructor(builderOrContext, selectFields = select_fields_1.selectFields) {\n        this.builderOrContext = builderOrContext;\n        this.selectFields = selectFields;\n    }\n    async run(req, options = {}) {\n        const context = this.builderOrContext instanceof context_1.Context\n            ? this.builderOrContext\n            : this.builderOrContext.build();\n        const instances = this.selectFields(req, context.fields, context.locations);\n        context.addFieldInstances(instances);\n        const haltedInstances = new Set();\n        for (const contextItem of context.stack) {\n            const promises = context.getData({ requiredOnly: true }).map(async (instance) => {\n                const { location, path } = instance;\n                const instanceKey = `${location}:${path}`;\n                if (haltedInstances.has(instanceKey)) {\n                    return;\n                }\n                try {\n                    await contextItem.run(context, instance.value, {\n                        req,\n                        location,\n                        path,\n                    });\n                    // An instance is mutable, so if an item changed its value, there's no need to call getData again\n                    const newValue = instance.value;\n                    // Checks whether the value changed.\n                    // Avoids e.g. undefined values being set on the request if it didn't have the key initially.\n                    const reqValue = path !== '' ? _.get(req[location], path) : req[location];\n                    if (!options.dryRun && reqValue !== instance.value) {\n                        path !== '' ? _.set(req[location], path, newValue) : _.set(req, location, newValue);\n                    }\n                }\n                catch (e) {\n                    if (e instanceof base_1.ValidationHalt) {\n                        haltedInstances.add(instanceKey);\n                        return;\n                    }\n                    throw e;\n                }\n            });\n            await Promise.all(promises);\n        }\n        if (!options.dryRun) {\n            const internalReq = req;\n            internalReq[base_1.contextsKey] = (internalReq[base_1.contextsKey] || []).concat(context);\n        }\n        return context;\n    }\n}\nexports.ContextRunnerImpl = ContextRunnerImpl;\n"]},"metadata":{},"sourceType":"script"}