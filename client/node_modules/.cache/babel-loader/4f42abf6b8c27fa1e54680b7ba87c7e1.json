{"ast":null,"code":"const express = require('express');\n\nconst request = require('request');\n\nconst config = require('config');\n\nconst router = express.Router();\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst auth = require('../../middleware/auth');\n\nconst Profile = require('../../models/Profile');\n\nconst User = require('../../models/User');\n\nconst Post = require('../../models/Post'); // @route   GET /api/profile/me\n// @desc    Get current user profile\n// @access  Private\n\n\nrouter.get('/me', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res.status(400).json({\n        errors: [{\n          msg: 'There is no profile for this user'\n        }]\n      });\n    }\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   POST /api/profile\n// @desc    Create or update user profile\n// @access  Private\n\nrouter.post('/', [auth, [check('status', 'Status is required').not().isEmpty(), check('skills', 'Skills are required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    company,\n    website,\n    location,\n    status,\n    skills,\n    bio,\n    githubusername,\n    youtube,\n    facebook,\n    twitter,\n    instagram,\n    linkedin\n  } = req.body; // Build profile object\n\n  const profileFields = {};\n  profileFields.user = req.user.id;\n  if (company) profileFields.company = company;\n  if (website) profileFields.website = website;\n  if (location) profileFields.location = location;\n  if (bio) profileFields.bio = bio;\n  if (status) profileFields.status = status;\n  if (githubusername) profileFields.githubusername = githubusername;\n\n  if (skills) {\n    profileFields.skills = skills.split(',').map(skill => skill.trim());\n  } // Build social object\n\n\n  profileFields.social = {};\n  if (youtube) profileFields.social.youtube = youtube;\n  if (facebook) profileFields.social.facebook = facebook;\n  if (twitter) profileFields.social.twitter = twitter;\n  if (instagram) profileFields.social.youtube = instagram;\n  if (linkedin) profileFields.social.linkedin = linkedin;\n\n  try {\n    let profile = await Profile.findOne({\n      user: req.user.id\n    });\n\n    if (profile) {\n      // Update\n      profile = await Profile.findOneAndUpdate({\n        user: req.user.id\n      }, {\n        $set: profileFields\n      }, {\n        new: true\n      });\n      return res.json(profile);\n    } // Create\n\n\n    profile = new Profile(profileFields);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   GET /api/profile\n// @desc    Get all user profile\n// @access  Public\n\nrouter.get('/', async (req, res) => {\n  try {\n    const profiles = await Profile.find().populate('user', ['name', 'avatar']);\n    res.json(profiles);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   GET /api/profile/user/:user_id\n// @desc    Get profile by user_id\n// @access  Public\n\nrouter.get('/user/:user_id', async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.params.user_id\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res.status(400).json({\n        errors: [{\n          msg: 'Profile not found'\n        }]\n      });\n    }\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n\n    if (err.kind == 'ObjectId') {\n      return res.status(400).json({\n        errors: [{\n          msg: 'Profile not found'\n        }]\n      });\n    }\n\n    res.status(500).send('Server Error');\n  }\n}); // @route   DELETE /api/profile\n// @desc    Delete profile,user & posts\n// @access  Private\n\nrouter.delete('/', auth, async (req, res) => {\n  try {\n    // delete posts\n    await Post.deleteMany({\n      user: req.user.id\n    }); // delete profile\n\n    await Profile.findOneAndRemove({\n      user: req.user.id\n    }); // delete user\n\n    await User.findOneAndRemove({\n      _id: req.user.id\n    });\n    res.json({\n      errors: [{\n        msg: 'User Deleted'\n      }]\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   PUT /api/profile/education\n// @desc    Add profile education\n// @access  Private\n\nrouter.put('/education', [auth, [check('school', 'School name is required').not().isEmpty(), check('degree', 'Degree is required').not().isEmpty(), check('fieldofstudy', 'Field of Study is required').not().isEmpty(), check('from', 'From Date is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    school,\n    degree,\n    fieldofstudy,\n    from,\n    to,\n    current,\n    description\n  } = req.body;\n  const newEdu = {\n    school,\n    degree,\n    fieldofstudy,\n    from,\n    to,\n    current,\n    description\n  };\n\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    });\n    profile.education.unshift(newEdu);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   DELETE /api/profile/education/:edu_id\n// @desc    Delete education from profile\n// @access  Private\n\nrouter.delete('/education/:edu_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }); // Get remove index\n\n    const removeIndex = profile.education.map(item => item.id).indexOf(req.params.edu_id);\n    profile.education.splice(removeIndex, 1);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   PUT /api/profile/experience\n// @desc    Add profile experience\n// @access  Private\n\nrouter.put('/experience', [auth, [check('title', 'Title is required').not().isEmpty(), check('company', 'Company is required').not().isEmpty(), check('from', 'From Date is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    title,\n    company,\n    location,\n    from,\n    to,\n    current,\n    description\n  } = req.body;\n  const newExp = {\n    title,\n    company,\n    location,\n    from,\n    to,\n    current,\n    description\n  };\n\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    });\n    profile.experience.unshift(newExp);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   DELETE /api/profile/experience/:exp_id\n// @desc    Delete experience from profile\n// @access  Private\n\nrouter.delete('/experience/:exp_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }); // Get remove index\n\n    const removeIndex = profile.experience.map(item => item.id).indexOf(req.params.exp_id);\n    profile.experience.splice(removeIndex, 1);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   GET /api/profile/github/:username\n// @desc    Get user repos from github\n// @access  Public\n\nrouter.get('/github/:username', (req, res) => {\n  try {\n    const option = {\n      uri: `https://api.github.com/users/${req.params.username}/repos?per_page=5&sort=created:asc&client_id=${config.get('githubClientId')}&client_secret=${config.get('githubSecret')}`,\n      method: 'GET',\n      headers: {\n        'user-agent': 'node.js'\n      }\n    };\n    request(option, (error, response, body) => {\n      if (error) console.error(error);\n\n      if (response.statusCode !== 200) {\n        return res.status(404).json({\n          errors: [{\n            msg: 'No Github profile found'\n          }]\n        });\n      }\n\n      res.json(JSON.parse(body));\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/routes/api/profile.js"],"names":["express","require","request","config","router","Router","check","validationResult","auth","Profile","User","Post","get","req","res","profile","findOne","user","id","populate","status","json","errors","msg","err","console","error","message","send","post","not","isEmpty","array","company","website","location","skills","bio","githubusername","youtube","facebook","twitter","instagram","linkedin","body","profileFields","split","map","skill","trim","social","findOneAndUpdate","$set","new","save","profiles","find","params","user_id","kind","delete","deleteMany","findOneAndRemove","_id","put","school","degree","fieldofstudy","from","to","current","description","newEdu","education","unshift","removeIndex","item","indexOf","edu_id","splice","title","newExp","experience","exp_id","option","uri","username","method","headers","response","statusCode","JSON","parse","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst request = require('request');\nconst config = require('config');\nconst router = express.Router();\nconst { check, validationResult } = require('express-validator');\n\nconst auth = require('../../middleware/auth');\nconst Profile = require('../../models/Profile');\nconst User = require('../../models/User');\nconst Post = require('../../models/Post');\n\n// @route   GET /api/profile/me\n// @desc    Get current user profile\n// @access  Private\nrouter.get('/me', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id,\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res\n        .status(400)\n        .json({ errors: [{ msg: 'There is no profile for this user' }] });\n    }\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   POST /api/profile\n// @desc    Create or update user profile\n// @access  Private\nrouter.post(\n  '/',\n  [\n    auth,\n    [\n      check('status', 'Status is required').not().isEmpty(),\n      check('skills', 'Skills are required').not().isEmpty(),\n    ],\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const {\n      company,\n      website,\n      location,\n      status,\n      skills,\n      bio,\n      githubusername,\n      youtube,\n      facebook,\n      twitter,\n      instagram,\n      linkedin,\n    } = req.body;\n\n    // Build profile object\n    const profileFields = {};\n    profileFields.user = req.user.id;\n    if (company) profileFields.company = company;\n    if (website) profileFields.website = website;\n    if (location) profileFields.location = location;\n    if (bio) profileFields.bio = bio;\n    if (status) profileFields.status = status;\n    if (githubusername) profileFields.githubusername = githubusername;\n    if (skills) {\n      profileFields.skills = skills.split(',').map((skill) => skill.trim());\n    }\n\n    // Build social object\n    profileFields.social = {};\n    if (youtube) profileFields.social.youtube = youtube;\n    if (facebook) profileFields.social.facebook = facebook;\n    if (twitter) profileFields.social.twitter = twitter;\n    if (instagram) profileFields.social.youtube = instagram;\n    if (linkedin) profileFields.social.linkedin = linkedin;\n\n    try {\n      let profile = await Profile.findOne({ user: req.user.id });\n\n      if (profile) {\n        // Update\n        profile = await Profile.findOneAndUpdate(\n          { user: req.user.id },\n          { $set: profileFields },\n          { new: true }\n        );\n\n        return res.json(profile);\n      }\n\n      // Create\n      profile = new Profile(profileFields);\n\n      await profile.save();\n      res.json(profile);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route   GET /api/profile\n// @desc    Get all user profile\n// @access  Public\nrouter.get('/', async (req, res) => {\n  try {\n    const profiles = await Profile.find().populate('user', ['name', 'avatar']);\n\n    res.json(profiles);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   GET /api/profile/user/:user_id\n// @desc    Get profile by user_id\n// @access  Public\nrouter.get('/user/:user_id', async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.params.user_id,\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res.status(400).json({ errors: [{ msg: 'Profile not found' }] });\n    }\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    if (err.kind == 'ObjectId') {\n      return res.status(400).json({ errors: [{ msg: 'Profile not found' }] });\n    }\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   DELETE /api/profile\n// @desc    Delete profile,user & posts\n// @access  Private\nrouter.delete('/', auth, async (req, res) => {\n  try {\n    // delete posts\n    await Post.deleteMany({ user: req.user.id });\n\n    // delete profile\n    await Profile.findOneAndRemove({ user: req.user.id });\n\n    // delete user\n    await User.findOneAndRemove({ _id: req.user.id });\n\n    res.json({ errors: [{ msg: 'User Deleted' }] });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   PUT /api/profile/education\n// @desc    Add profile education\n// @access  Private\nrouter.put(\n  '/education',\n  [\n    auth,\n    [\n      check('school', 'School name is required').not().isEmpty(),\n      check('degree', 'Degree is required').not().isEmpty(),\n      check('fieldofstudy', 'Field of Study is required').not().isEmpty(),\n      check('from', 'From Date is required').not().isEmpty(),\n    ],\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const {\n      school,\n      degree,\n      fieldofstudy,\n      from,\n      to,\n      current,\n      description,\n    } = req.body;\n\n    const newEdu = {\n      school,\n      degree,\n      fieldofstudy,\n      from,\n      to,\n      current,\n      description,\n    };\n\n    try {\n      const profile = await Profile.findOne({ user: req.user.id });\n\n      profile.education.unshift(newEdu);\n\n      await profile.save();\n\n      res.json(profile);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route   DELETE /api/profile/education/:edu_id\n// @desc    Delete education from profile\n// @access  Private\nrouter.delete('/education/:edu_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({ user: req.user.id });\n\n    // Get remove index\n    const removeIndex = profile.education\n      .map((item) => item.id)\n      .indexOf(req.params.edu_id);\n\n    profile.education.splice(removeIndex, 1);\n\n    await profile.save();\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   PUT /api/profile/experience\n// @desc    Add profile experience\n// @access  Private\nrouter.put(\n  '/experience',\n  [\n    auth,\n    [\n      check('title', 'Title is required').not().isEmpty(),\n      check('company', 'Company is required').not().isEmpty(),\n      check('from', 'From Date is required').not().isEmpty(),\n    ],\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const {\n      title,\n      company,\n      location,\n      from,\n      to,\n      current,\n      description,\n    } = req.body;\n\n    const newExp = {\n      title,\n      company,\n      location,\n      from,\n      to,\n      current,\n      description,\n    };\n\n    try {\n      const profile = await Profile.findOne({ user: req.user.id });\n\n      profile.experience.unshift(newExp);\n\n      await profile.save();\n\n      res.json(profile);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route   DELETE /api/profile/experience/:exp_id\n// @desc    Delete experience from profile\n// @access  Private\nrouter.delete('/experience/:exp_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({ user: req.user.id });\n\n    // Get remove index\n    const removeIndex = profile.experience\n      .map((item) => item.id)\n      .indexOf(req.params.exp_id);\n\n    profile.experience.splice(removeIndex, 1);\n\n    await profile.save();\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   GET /api/profile/github/:username\n// @desc    Get user repos from github\n// @access  Public\nrouter.get('/github/:username', (req, res) => {\n  try {\n    const option = {\n      uri: `https://api.github.com/users/${\n        req.params.username\n      }/repos?per_page=5&sort=created:asc&client_id=${config.get(\n        'githubClientId'\n      )}&client_secret=${config.get('githubSecret')}`,\n      method: 'GET',\n      headers: { 'user-agent': 'node.js' },\n    };\n\n    request(option, (error, response, body) => {\n      if (error) console.error(error);\n\n      if (response.statusCode !== 200) {\n        return res\n          .status(404)\n          .json({ errors: [{ msg: 'No Github profile found' }] });\n      }\n\n      res.json(JSON.parse(body));\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"script"}