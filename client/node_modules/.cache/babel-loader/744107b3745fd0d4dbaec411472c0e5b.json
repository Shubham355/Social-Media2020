{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"../utils\");\n\nclass Sanitization {\n  constructor(sanitizer, custom, options = []) {\n    this.sanitizer = sanitizer;\n    this.custom = custom;\n    this.options = options;\n  }\n\n  async run(context, value, meta) {\n    const {\n      path,\n      location\n    } = meta;\n    const newValue = this.custom ? this.sanitizer(value, meta) : this.sanitizer(utils_1.toString(value), ...this.options);\n    context.setData(path, newValue, location);\n  }\n\n}\n\nexports.Sanitization = Sanitization;","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/node_modules/express-validator/src/context-items/sanitization.js"],"names":["Object","defineProperty","exports","value","utils_1","require","Sanitization","constructor","sanitizer","custom","options","run","context","meta","path","location","newValue","toString","setData"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,YAAN,CAAmB;AACfC,EAAAA,WAAW,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,OAAO,GAAG,EAA9B,EAAkC;AACzC,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AACD,QAAMC,GAAN,CAAUC,OAAV,EAAmBT,KAAnB,EAA0BU,IAA1B,EAAgC;AAC5B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAqBF,IAA3B;AACA,UAAMG,QAAQ,GAAG,KAAKP,MAAL,GACX,KAAKD,SAAL,CAAeL,KAAf,EAAsBU,IAAtB,CADW,GAEX,KAAKL,SAAL,CAAeJ,OAAO,CAACa,QAAR,CAAiBd,KAAjB,CAAf,EAAwC,GAAG,KAAKO,OAAhD,CAFN;AAGAE,IAAAA,OAAO,CAACM,OAAR,CAAgBJ,IAAhB,EAAsBE,QAAtB,EAAgCD,QAAhC;AACH;;AAZc;;AAcnBb,OAAO,CAACI,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../utils\");\nclass Sanitization {\n    constructor(sanitizer, custom, options = []) {\n        this.sanitizer = sanitizer;\n        this.custom = custom;\n        this.options = options;\n    }\n    async run(context, value, meta) {\n        const { path, location } = meta;\n        const newValue = this.custom\n            ? this.sanitizer(value, meta)\n            : this.sanitizer(utils_1.toString(value), ...this.options);\n        context.setData(path, newValue, location);\n    }\n}\nexports.Sanitization = Sanitization;\n"]},"metadata":{},"sourceType":"script"}