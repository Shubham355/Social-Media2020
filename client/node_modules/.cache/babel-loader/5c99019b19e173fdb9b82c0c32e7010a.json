{"ast":null,"code":"var _jsxFileName = \"/home/shubham/Desktop/Socialmedia_MERN/client/src/components/dashboard/Dashboard.js\";\nimport React, { useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getCurrentProfile, getAllProfiles } from '../../actions/profile';\nimport Spinner from '../layout/Spinner';\nimport Posts from '../posts/Posts';\nimport SearchBar from '../searchbar/index';\nimport AutoComplete from '../searchbar/AutoComplete';\n\nconst Dashboard = ({\n  getCurrentProfile,\n  getAllProfiles,\n  auth: {\n    user\n  },\n  profile: {\n    profile,\n    profiles,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getCurrentProfile();\n    getAllProfiles();\n  }, [getCurrentProfile, getAllProfiles]);\n  let oldList = profiles.map(profile => {\n    if (profile.user !== null) {\n      return {\n        name: profile.user.name\n      };\n    }\n  });\n  oldList = oldList.filter(list => list !== undefined);\n  let suggestions = Object.values(oldList);\n  uggestions = Object.values(oldList);\n  console.log(suggestions);\n  return loading && profile === null ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    suggestions: suggestions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, \"Dashboard\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), \" Welcome \", user && user.name), profile !== null ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Posts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, \"You have not yet setup a profile, please add some info\"), /*#__PURE__*/React.createElement(Link, {\n    to: \"/create-profile\",\n    className: \"btn btn-primary my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, \"Create Profile\"), /*#__PURE__*/React.createElement(Posts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  })));\n};\n\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  getAllProfiles: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getCurrentProfile,\n  getAllProfiles\n})(Dashboard);","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/client/src/components/dashboard/Dashboard.js"],"names":["React","useEffect","Fragment","PropTypes","Link","connect","getCurrentProfile","getAllProfiles","Spinner","Posts","SearchBar","AutoComplete","Dashboard","auth","user","profile","profiles","loading","oldList","map","name","filter","list","undefined","suggestions","Object","values","uggestions","console","log","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getCurrentProfile, getAllProfiles } from '../../actions/profile';\nimport Spinner from '../layout/Spinner';\nimport Posts from '../posts/Posts';\nimport SearchBar from '../searchbar/index';\nimport AutoComplete from '../searchbar/AutoComplete';\n\nconst Dashboard = ({\n  getCurrentProfile,\n  getAllProfiles,\n  auth: { user },\n  profile: { profile, profiles, loading },\n}) => {\n  useEffect(() => {\n    getCurrentProfile();\n    getAllProfiles();\n  }, [getCurrentProfile, getAllProfiles]);\n\n  let oldList = profiles.map((profile) => {\n    if (profile.user !== null) {\n      return { name: profile.user.name };\n    }\n  });\n\n  oldList = oldList.filter((list) => list !== undefined);\n\n  let suggestions = Object.values(oldList);\n  uggestions = Object.values(oldList);\n\n  console.log(suggestions);\n\n  return loading && profile === null ? (\n    <Spinner />\n  ) : (\n    <Fragment>\n      {/* <SearchBar /> */}\n      {/* <SearchActions /> */}\n      <AutoComplete suggestions={suggestions} />\n      <h1 className='large text-primary'>Dashboard</h1>\n      <p className='lead'>\n        <i className='fas fa-user'></i> Welcome {user && user.name}\n      </p>\n      {profile !== null ? (\n        <Fragment>\n          <Posts />\n        </Fragment>\n      ) : (\n        <Fragment>\n          <p>You have not yet setup a profile, please add some info</p>\n          <Link to='/create-profile' className='btn btn-primary my-1'>\n            Create Profile\n          </Link>\n\n          <Posts />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  getAllProfiles: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n  profile: state.profile,\n});\n\nexport default connect(mapStateToProps, { getCurrentProfile, getAllProfiles })(\n  Dashboard\n);\n"]},"metadata":{},"sourceType":"module"}