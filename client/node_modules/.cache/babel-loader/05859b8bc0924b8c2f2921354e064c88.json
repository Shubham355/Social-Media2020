{"ast":null,"code":"import axios from 'axios';\nimport { GET_PROFILE, GET_REPOS, PROFILE_ERROR, UPDATE_PROFILE, CLEAR_PROFILE, ACCOUNT_DELETED, GET_PROFILES } from './types';\nimport { setAlert } from './alert';\nimport swal from 'sweetalert'; // Get  profile of current user\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get('/api/profile');\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get profile by ID\n\nexport const getProfileByID = userID => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/user/${userID}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    }); // dispatch({ type: CLEAR_PROFILE });\n  }\n}; // Get Github Repos\n\nexport const getGithubRepos = username => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/github/${username}`);\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create/Update Profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    const res = await axios.post('/api/profile', formData, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    const title = edit ? 'Profile Updated' : 'Profile Created';\n    swal({\n      title,\n      icon: 'success'\n    }); // dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    history.push('/profile');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors.length === 2) {\n      swal({\n        title: 'Status & Skills are required!',\n        icon: 'warning'\n      });\n    } else {\n      swal({\n        title: errors[0].msg,\n        icon: 'warning'\n      }); // errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Experience\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    const res = await axios.put('/api/profile/experience', formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    swal({\n      title: 'Experience Added',\n      icon: 'success'\n    }); // dispatch(setAlert('Experience Added', 'success'));\n\n    history.push('/add-experience');\n  } catch (err) {\n    // console.log(err)\n    const errors = err.response.data.errors;\n\n    if (errors.length === 3) {\n      swal({\n        title: 'Please fill all the fields!',\n        icon: 'warning'\n      });\n    } else {\n      if (errors.length === 2) {\n        swal({\n          title: errors[0].msg,\n          icon: 'warning'\n        });\n      } else {\n        swal({\n          title: errors[0].msg,\n          icon: 'warning'\n        }); // errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n      }\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Education\n\nexport const addEducation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n    const res = await axios.put('/api/profile/education', formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    swal({\n      title: 'Education Added',\n      icon: 'success'\n    }); // dispatch(setAlert('Education Added', 'success'));\n\n    history.push('/add-education');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Experience\n\nexport const deleteExperience = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/experience/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    swal({\n      title: 'Experience Removed',\n      icon: 'success'\n    }); // dispatch(setAlert('Experience Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Education\n\nexport const deleteEducation = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/education/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    swal({\n      title: 'Education Removed',\n      icon: 'success'\n    }); // dispatch(setAlert('Education Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Account & Profile\n\nexport const deleteAccount = () => async dispatch => {\n  try {\n    await axios.delete('/api/profile');\n    dispatch({\n      type: CLEAR_PROFILE\n    });\n    dispatch({\n      type: ACCOUNT_DELETED\n    });\n    swal({\n      title: 'Your Account has been permanently deleted',\n      icon: 'success'\n    }); // dispatch(setAlert('Your Account has been permanently deleted', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Clear Profile\n\nexport const clearProfile = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n};","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/client/src/actions/profile.js"],"names":["axios","GET_PROFILE","GET_REPOS","PROFILE_ERROR","UPDATE_PROFILE","CLEAR_PROFILE","ACCOUNT_DELETED","GET_PROFILES","setAlert","swal","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getProfiles","getProfileByID","userID","getGithubRepos","username","createProfile","formData","history","edit","config","post","title","icon","push","errors","length","addExperience","put","addEducation","forEach","error","deleteExperience","id","delete","deleteEducation","deleteAccount","clearProfile"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n  GET_PROFILE,\n  GET_REPOS,\n  PROFILE_ERROR,\n  UPDATE_PROFILE,\n  CLEAR_PROFILE,\n  ACCOUNT_DELETED,\n  GET_PROFILES,\n} from './types';\nimport { setAlert } from './alert';\nimport swal from 'sweetalert';\n\n// Get  profile of current user\nexport const getCurrentProfile = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/profile/me');\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get all profiles\nexport const getProfiles = () => async (dispatch) => {\n  dispatch({ type: CLEAR_PROFILE });\n\n  try {\n    const res = await axios.get('/api/profile');\n\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get profile by ID\nexport const getProfileByID = (userID) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/profile/user/${userID}`);\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n\n    // dispatch({ type: CLEAR_PROFILE });\n  }\n};\n\n// Get Github Repos\nexport const getGithubRepos = (username) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/profile/github/${username}`);\n\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Create/Update Profile\nexport const createProfile = (formData, history, edit = false) => async (\n  dispatch\n) => {\n  try {\n    const config = {\n      'Content-Type': 'application/json',\n    };\n\n    const res = await axios.post('/api/profile', formData, config);\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data,\n    });\n\n    const title = edit ? 'Profile Updated' : 'Profile Created';\n    swal({ title, icon: 'success' });\n\n    // dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    history.push('/profile');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors.length === 2) {\n      swal({ title: 'Status & Skills are required!', icon: 'warning' });\n    } else {\n      swal({ title: errors[0].msg, icon: 'warning' });\n      // errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add Experience\nexport const addExperience = (formData, history) => async (dispatch) => {\n  try {\n    const config = {\n      'Content-Type': 'application/json',\n    };\n\n    const res = await axios.put('/api/profile/experience', formData, config);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data,\n    });\n\n    swal({ title: 'Experience Added', icon: 'success' });\n    // dispatch(setAlert('Experience Added', 'success'));\n\n    history.push('/add-experience');\n  } catch (err) {\n    // console.log(err)\n    const errors = err.response.data.errors;\n\n    if (errors.length === 3) {\n      swal({ title: 'Please fill all the fields!', icon: 'warning' });\n    } else {\n      if (errors.length === 2) {\n        swal({ title: errors[0].msg, icon: 'warning' });\n      } else {\n        swal({ title: errors[0].msg, icon: 'warning' });\n        // errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n      }\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add Education\nexport const addEducation = (formData, history) => async (dispatch) => {\n  try {\n    const config = {\n      'Content-Type': 'application/json',\n    };\n\n    const res = await axios.put('/api/profile/education', formData, config);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data,\n    });\n\n    swal({ title: 'Education Added', icon: 'success' });\n    // dispatch(setAlert('Education Added', 'success'));\n\n    history.push('/add-education');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete Experience\nexport const deleteExperience = (id) => async (dispatch) => {\n  try {\n    const res = await axios.delete(`/api/profile/experience/${id}`);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data,\n    });\n\n    swal({ title: 'Experience Removed', icon: 'success' });\n\n    // dispatch(setAlert('Experience Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete Education\nexport const deleteEducation = (id) => async (dispatch) => {\n  try {\n    const res = await axios.delete(`/api/profile/education/${id}`);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data,\n    });\n\n    swal({ title: 'Education Removed', icon: 'success' });\n    // dispatch(setAlert('Education Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete Account & Profile\nexport const deleteAccount = () => async (dispatch) => {\n  try {\n    await axios.delete('/api/profile');\n\n    dispatch({ type: CLEAR_PROFILE });\n    dispatch({ type: ACCOUNT_DELETED });\n\n    swal({\n      title: 'Your Account has been permanently deleted',\n      icon: 'success',\n    });\n    // dispatch(setAlert('Your Account has been permanently deleted', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Clear Profile\nexport const clearProfile = () => async (dispatch) => {\n  dispatch({\n    type: CLEAR_PROFILE,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}