{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst gravatar = require('gravatar');\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst config = require('config');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst User = require('../../models/User'); // @route   POST /api/users\n// @desc    Register new user\n// @access  Public\n\n\nrouter.post('/', [check('name', 'Name is Required').not().isEmpty(), check('email', 'Please enter a valid email').isEmail(), check('password', 'Please enter a password with 6 or more characters').isLength({\n  min: 6\n})], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    // Check if user already exists\n    let user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(400).json({\n        errors: [{\n          msg: 'User Already Exists'\n        }]\n      });\n    } // Get users gravatar\n\n\n    const avatar = gravatar.url(email, {\n      s: '200',\n      r: 'pg',\n      d: 'mm'\n    });\n    user = new User({\n      name,\n      email,\n      avatar,\n      password\n    }); // Encrypt password\n\n    const salt = await bcrypt.genSalt(10);\n    user.password = await bcrypt.hash(password, salt);\n    await user.save(); // Return jsonwebtoken\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jwt.sign(payload, config.get('jwtSecret'), {\n      expiresIn: 360000\n    }, (err, token) => {\n      if (err) throw err;\n      res.json({\n        token\n      });\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/routes/api/users.js"],"names":["express","require","router","Router","gravatar","bcrypt","jwt","config","check","validationResult","User","post","not","isEmpty","isEmail","isLength","min","req","res","errors","status","json","array","name","email","password","body","user","findOne","msg","avatar","url","s","r","d","salt","genSalt","hash","save","payload","id","sign","get","expiresIn","err","token","console","error","message","send","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst gravatar = require('gravatar');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst config = require('config');\nconst { check, validationResult } = require('express-validator');\n\nconst User = require('../../models/User');\n\n// @route   POST /api/users\n// @desc    Register new user\n// @access  Public\nrouter.post(\n  '/',\n  [\n    check('name', 'Name is Required').not().isEmpty(),\n    check('email', 'Please enter a valid email').isEmail(),\n    check(\n      'password',\n      'Please enter a password with 6 or more characters'\n    ).isLength({ min: 6 }),\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { name, email, password } = req.body;\n\n    try {\n      // Check if user already exists\n      let user = await User.findOne({ email });\n\n      if (user) {\n        return res\n          .status(400)\n          .json({ errors: [{ msg: 'User Already Exists' }] });\n      }\n\n      // Get users gravatar\n      const avatar = gravatar.url(email, {\n        s: '200',\n        r: 'pg',\n        d: 'mm',\n      });\n\n      user = new User({\n        name,\n        email,\n        avatar,\n        password,\n      });\n\n      // Encrypt password\n      const salt = await bcrypt.genSalt(10);\n\n      user.password = await bcrypt.hash(password, salt);\n\n      await user.save();\n\n      // Return jsonwebtoken\n      const payload = {\n        user: {\n          id: user.id,\n        },\n      };\n\n      jwt.sign(\n        payload,\n        config.get('jwtSecret'),\n        { expiresIn: 360000 },\n        (err, token) => {\n          if (err) throw err;\n          res.json({ token });\n        }\n      );\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"script"}