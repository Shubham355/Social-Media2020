{"ast":null,"code":"const express = require('express');\n\nconst request = require('request');\n\nconst config = require('config');\n\nconst router = express.Router();\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst auth = require('../../middleware/auth');\n\nconst Profile = require('../../models/Profile');\n\nconst User = require('../../models/User'); // @route   GET /api/profile/me\n// @desc    Get current user profile\n// @access  Private\n\n\nrouter.get('/me', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res.status(400).json({\n        msg: 'There is no profile for this user'\n      });\n    }\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   POST /api/profile\n// @desc    Create or update user profile\n// @access  Private\n\nrouter.post('/', [auth, [check('status', 'Status is required').not().isEmpty(), check('skills', 'Skills are required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  const {\n    company,\n    website,\n    location,\n    status,\n    skills,\n    bio,\n    githubusername,\n    youtube,\n    facebook,\n    twitter,\n    instagram,\n    linkedin\n  } = req.body; // Build profile object\n\n  const profileFields = {};\n  profileFields.user = req.user.id;\n  if (company) profileFields.company = company;\n  if (website) profileFields.website = website;\n  if (location) profileFields.location = location;\n  if (bio) profileFields.bio = bio;\n  if (status) profileFields.status = status;\n  if (githubusername) profileFields.githubusername = githubusername;\n\n  if (skills) {\n    profileFields.skills = skills.split(',').map(skill => skill.trim());\n  } // Build social object\n\n\n  profileFields.social = {};\n  if (youtube) profileFields.social.youtube = youtube;\n  if (facebook) profileFields.social.facebook = facebook;\n  if (twitter) profileFields.social.twitter = twitter;\n  if (instagram) profileFields.social.youtube = instagram;\n  if (linkedin) profileFields.social.linkedin = linkedin;\n\n  try {\n    let profile = await Profile.findOne({\n      user: req.user.id\n    });\n\n    if (profile) {\n      // Update\n      profile = await Profile.findOneAndUpdate({\n        user: req.user.id\n      }, {\n        $set: profileFields\n      }, {\n        new: true\n      });\n      return res.json({\n        msg: 'Successfully Updated Profile',\n        profile\n      });\n    } // Create\n\n\n    profile = new Profile(profileFields);\n    await profile.save();\n    res.json({\n      msg: 'Successfully Created New Profile',\n      profile\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   GET /api/profile\n// @desc    Get all user profile\n// @access  Public\n\nrouter.get('/', async (req, res) => {\n  try {\n    const profiles = await Profile.find().populate('user', ['name', 'avatar']);\n    res.json(profiles);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   GET /api/profile/user/:user_id\n// @desc    Get profile by user_id\n// @access  Public\n\nrouter.get('/user/:user_id', async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.params.user_id\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res.status(400).json({\n        msg: 'Profile not found'\n      });\n    }\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n\n    if (err.kind == 'ObjectId') {\n      return res.status(400).json({\n        msg: 'Profile not found'\n      });\n    }\n\n    res.status(500).send('Server Error');\n  }\n}); // @route   DELETE /api/profile\n// @desc    Delete profile,user & posts\n// @access  Private\n\nrouter.delete('/', auth, async (req, res) => {\n  try {\n    // @todo delete posts\n    // delete profile\n    await Profile.findOneAndRemove({\n      user: req.user.id\n    }); // delete user\n\n    await User.findOneAndRemove({\n      _id: req.user.id\n    });\n    res.json({\n      msg: 'User Deleted'\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   PUT /api/profile/education\n// @desc    Add profile education\n// @access  Private\n\nrouter.put('/education', [auth, [check('school', 'Title is required').not().isEmpty(), check('degree', 'Degree is required').not().isEmpty(), check('fieldofstudy', 'Field of Study is required').not().isEmpty(), check('from', 'From is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n\n  const {\n    school,\n    degree,\n    fieldofstudy,\n    from,\n    to,\n    current,\n    description\n  } = req.body;\n  const newEdu = {\n    school,\n    degree,\n    fieldofstudy,\n    from,\n    to,\n    current,\n    description\n  };\n\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    });\n    profile.education.unshift(newEdu);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   DELETE /api/profile/education/:edu_id\n// @desc    Delete education from profile\n// @access  Private\n\nrouter.delete('/education/:edu_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }); // Get remove index\n\n    const removeIndex = profile.education.map(item => item.id).indexOf(req.params.edu_id);\n    profile.education.splice(removeIndex, 1);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   PUT /api/profile/experience\n// @desc    Add profile experience\n// @access  Private\n\nrouter.put('/experience', [auth, [check('title', 'Title is required').not().isEmpty(), check('company', 'Company is required').not().isEmpty(), check('from', 'From is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n\n  const {\n    title,\n    company,\n    location,\n    from,\n    to,\n    current,\n    description\n  } = req.body;\n  const newExp = {\n    title,\n    company,\n    location,\n    from,\n    to,\n    current,\n    description\n  };\n\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    });\n    profile.experience.unshift(newExp);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   DELETE /api/profile/experience/:exp_id\n// @desc    Delete experience from profile\n// @access  Private\n\nrouter.delete('/experience/:exp_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id\n    }); // Get remove index\n\n    const removeIndex = profile.experience.map(item => item.id).indexOf(req.params.exp_id);\n    profile.experience.splice(removeIndex, 1);\n    await profile.save();\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   GET /api/profile/github/:username\n// @desc    Get user repos from github\n// @access  Public\n\nrouter.get('/github/:username', (req, res) => {\n  try {\n    const option = {\n      uri: `https://api.github.com/users/${req.params.username}/repos?per_page=5&sort=created:asc&client_id=${config.get('githubClientId')}&client_secret=${config.get('githubSecret')}`,\n      method: 'GET',\n      headers: {\n        'user-agent': 'node.js'\n      }\n    };\n    request(option, (error, response, body) => {\n      if (error) console.error(error);\n\n      if (response.statusCode !== 200) {\n        return res.status(404).json({\n          msg: 'No Github profile found'\n        });\n      }\n\n      res.json(JSON.parse(body));\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/routes/api/profile.js"],"names":["express","require","request","config","router","Router","check","validationResult","auth","Profile","User","get","req","res","profile","findOne","user","id","populate","status","json","msg","err","console","error","message","send","post","not","isEmpty","errors","array","company","website","location","skills","bio","githubusername","youtube","facebook","twitter","instagram","linkedin","body","profileFields","split","map","skill","trim","social","findOneAndUpdate","$set","new","save","profiles","find","params","user_id","kind","delete","findOneAndRemove","_id","put","school","degree","fieldofstudy","from","to","current","description","newEdu","education","unshift","removeIndex","item","indexOf","edu_id","splice","title","newExp","experience","exp_id","option","uri","username","method","headers","response","statusCode","JSON","parse","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst request = require('request');\nconst config = require('config');\nconst router = express.Router();\nconst { check, validationResult } = require('express-validator');\n\nconst auth = require('../../middleware/auth');\nconst Profile = require('../../models/Profile');\nconst User = require('../../models/User');\n\n// @route   GET /api/profile/me\n// @desc    Get current user profile\n// @access  Private\nrouter.get('/me', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.user.id,\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res.status(400).json({ msg: 'There is no profile for this user' });\n    }\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   POST /api/profile\n// @desc    Create or update user profile\n// @access  Private\nrouter.post(\n  '/',\n  [\n    auth,\n    [\n      check('status', 'Status is required').not().isEmpty(),\n      check('skills', 'Skills are required').not().isEmpty(),\n    ],\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const {\n      company,\n      website,\n      location,\n      status,\n      skills,\n      bio,\n      githubusername,\n      youtube,\n      facebook,\n      twitter,\n      instagram,\n      linkedin,\n    } = req.body;\n\n    // Build profile object\n    const profileFields = {};\n    profileFields.user = req.user.id;\n    if (company) profileFields.company = company;\n    if (website) profileFields.website = website;\n    if (location) profileFields.location = location;\n    if (bio) profileFields.bio = bio;\n    if (status) profileFields.status = status;\n    if (githubusername) profileFields.githubusername = githubusername;\n    if (skills) {\n      profileFields.skills = skills.split(',').map((skill) => skill.trim());\n    }\n\n    // Build social object\n    profileFields.social = {};\n    if (youtube) profileFields.social.youtube = youtube;\n    if (facebook) profileFields.social.facebook = facebook;\n    if (twitter) profileFields.social.twitter = twitter;\n    if (instagram) profileFields.social.youtube = instagram;\n    if (linkedin) profileFields.social.linkedin = linkedin;\n\n    try {\n      let profile = await Profile.findOne({ user: req.user.id });\n\n      if (profile) {\n        // Update\n        profile = await Profile.findOneAndUpdate(\n          { user: req.user.id },\n          { $set: profileFields },\n          { new: true }\n        );\n\n        return res.json({ msg: 'Successfully Updated Profile', profile });\n      }\n\n      // Create\n      profile = new Profile(profileFields);\n\n      await profile.save();\n      res.json({ msg: 'Successfully Created New Profile', profile });\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route   GET /api/profile\n// @desc    Get all user profile\n// @access  Public\nrouter.get('/', async (req, res) => {\n  try {\n    const profiles = await Profile.find().populate('user', ['name', 'avatar']);\n\n    res.json(profiles);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   GET /api/profile/user/:user_id\n// @desc    Get profile by user_id\n// @access  Public\nrouter.get('/user/:user_id', async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      user: req.params.user_id,\n    }).populate('user', ['name', 'avatar']);\n\n    if (!profile) {\n      return res.status(400).json({ msg: 'Profile not found' });\n    }\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    if (err.kind == 'ObjectId') {\n      return res.status(400).json({ msg: 'Profile not found' });\n    }\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   DELETE /api/profile\n// @desc    Delete profile,user & posts\n// @access  Private\nrouter.delete('/', auth, async (req, res) => {\n  try {\n    // @todo delete posts\n\n    // delete profile\n    await Profile.findOneAndRemove({ user: req.user.id });\n\n    // delete user\n    await User.findOneAndRemove({ _id: req.user.id });\n\n    res.json({ msg: 'User Deleted' });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   PUT /api/profile/education\n// @desc    Add profile education\n// @access  Private\nrouter.put(\n  '/education',\n  [\n    auth,\n    [\n      check('school', 'Title is required').not().isEmpty(),\n      check('degree', 'Degree is required').not().isEmpty(),\n      check('fieldofstudy', 'Field of Study is required').not().isEmpty(),\n      check('from', 'From is required').not().isEmpty(),\n    ],\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ error: errors.array() });\n    }\n\n    const {\n      school,\n      degree,\n      fieldofstudy,\n      from,\n      to,\n      current,\n      description,\n    } = req.body;\n\n    const newEdu = {\n      school,\n      degree,\n      fieldofstudy,\n      from,\n      to,\n      current,\n      description,\n    };\n\n    try {\n      const profile = await Profile.findOne({ user: req.user.id });\n\n      profile.education.unshift(newEdu);\n\n      await profile.save();\n\n      res.json(profile);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route   DELETE /api/profile/education/:edu_id\n// @desc    Delete education from profile\n// @access  Private\nrouter.delete('/education/:edu_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({ user: req.user.id });\n\n    // Get remove index\n    const removeIndex = profile.education\n      .map((item) => item.id)\n      .indexOf(req.params.edu_id);\n\n    profile.education.splice(removeIndex, 1);\n\n    await profile.save();\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   PUT /api/profile/experience\n// @desc    Add profile experience\n// @access  Private\nrouter.put(\n  '/experience',\n  [\n    auth,\n    [\n      check('title', 'Title is required').not().isEmpty(),\n      check('company', 'Company is required').not().isEmpty(),\n      check('from', 'From is required').not().isEmpty(),\n    ],\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ error: errors.array() });\n    }\n\n    const {\n      title,\n      company,\n      location,\n      from,\n      to,\n      current,\n      description,\n    } = req.body;\n\n    const newExp = {\n      title,\n      company,\n      location,\n      from,\n      to,\n      current,\n      description,\n    };\n\n    try {\n      const profile = await Profile.findOne({ user: req.user.id });\n\n      profile.experience.unshift(newExp);\n\n      await profile.save();\n\n      res.json(profile);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route   DELETE /api/profile/experience/:exp_id\n// @desc    Delete experience from profile\n// @access  Private\nrouter.delete('/experience/:exp_id', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({ user: req.user.id });\n\n    // Get remove index\n    const removeIndex = profile.experience\n      .map((item) => item.id)\n      .indexOf(req.params.exp_id);\n\n    profile.experience.splice(removeIndex, 1);\n\n    await profile.save();\n\n    res.json(profile);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   GET /api/profile/github/:username\n// @desc    Get user repos from github\n// @access  Public\nrouter.get('/github/:username', (req,res) => {\n  try {\n    const option = {\n      uri: `https://api.github.com/users/${req.params.username}/repos?per_page=5&sort=created:asc&client_id=${config.get('githubClientId')}&client_secret=${config.get('githubSecret')}`,\n      method: 'GET',\n      headers: { 'user-agent': 'node.js' }\n    };\n\n    request(option, (error,response,body) => {\n      if(error)  console.error(error);\n\n      if(response.statusCode !== 200) {\n        return res.status(404).json({ msg: 'No Github profile found' });\n      }\n\n      res.json(JSON.parse(body));\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"script"}