{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from '../actions/types';\nimport axios from 'axios';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken';\nimport swal from 'sweetalert'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors.length);\n\n    if (errors.length === 3) {\n      swal({\n        title: 'Please fill all the fields!',\n        icon: 'warning'\n      });\n    } else {\n      if (errors.length === 2) {\n        swal({\n          title: errors[0].msg,\n          icon: 'warning'\n        });\n      } else {\n        errors.forEach(error => swal({\n          title: error.msg,\n          icon: 'warning'\n        })); // errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n      }\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors.length === 2) {\n      swal({\n        title: errors[0].msg,\n        icon: 'warning'\n      });\n    } else {\n      errors.forEach(error => swal({\n        title: error.msg,\n        icon: 'warning'\n      })); // errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/client/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","axios","setAlert","setAuthToken","swal","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","console","log","length","title","icon","msg","forEach","error","login","logout"],"mappings":"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","sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_PROFILE,\n} from '../actions/types';\nimport axios from 'axios';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken';\nimport swal from 'sweetalert';\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register user\nexport const register = ({ name, email, password }) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ name, email, password });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors.length);\n    if (errors.length === 3) {\n      swal({ title: 'Please fill all the fields!', icon: 'warning' });\n    } else {\n      if (errors.length === 2) {\n        swal({ title: errors[0].msg, icon: 'warning' });\n      } else {\n        errors.forEach((error) => swal({ title: error.msg, icon: 'warning' }));\n        // errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n      }\n    }\n\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n// Login user\nexport const login = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors.length === 2) {\n      swal({ title: errors[0].msg, icon: 'warning' });\n    } else {\n      errors.forEach((error) => swal({ title: error.msg, icon: 'warning' }));\n      // errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n// Logout / Clear profile\nexport const logout = () => (dispatch) => {\n  dispatch({\n    type: CLEAR_PROFILE,\n  });\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}