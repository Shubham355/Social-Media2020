{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst chain_1 = require(\"../chain\");\n\nconst context_builder_1 = require(\"../context-builder\"); // A dummy context item that gets added to surrogate contexts just to make them run\n\n\nconst dummyItem = {\n  async run() {}\n\n};\n\nfunction oneOf(chains, message) {\n  return async (req, _res, next) => {\n    const surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build(); // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n\n    const promises = chains.map(async chain => {\n      const group = Array.isArray(chain) ? chain : [chain];\n      const contexts = await Promise.all(group.map(chain => chain.run(req, {\n        dryRun: true\n      })));\n\n      const groupErrors = _.flatMap(contexts, 'errors'); // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n      // if its entire group is valid.\n\n\n      if (!groupErrors.length) {\n        contexts.forEach(context => {\n          surrogateContext.addFieldInstances(context.getData());\n        });\n      }\n\n      return groupErrors;\n    });\n\n    try {\n      const allErrors = await Promise.all(promises);\n      const success = allErrors.some(groupErrors => groupErrors.length === 0);\n\n      if (!success) {\n        // Only add an error to the context if no group of chains had success.\n        surrogateContext.addError(typeof message === 'function' ? message({\n          req\n        }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n      } // Final context running pass to ensure contexts are added and values are modified properly\n\n\n      await new chain_1.ContextRunnerImpl(surrogateContext).run(req);\n      next();\n    } catch (e) {\n      next(e);\n    }\n  };\n}\n\nexports.oneOf = oneOf;","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/node_modules/express-validator/src/middlewares/one-of.js"],"names":["Object","defineProperty","exports","value","_","require","chain_1","context_builder_1","dummyItem","run","oneOf","chains","message","req","_res","next","surrogateContext","ContextBuilder","addItem","build","promises","map","chain","group","Array","isArray","contexts","Promise","all","dryRun","groupErrors","flatMap","length","forEach","context","addFieldInstances","getData","allErrors","success","some","addError","ContextRunnerImpl","e"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,oBAAD,CAAjC,C,CACA;;;AACA,MAAMG,SAAS,GAAG;AAAE,QAAMC,GAAN,GAAY,CAAG;;AAAjB,CAAlB;;AACA,SAASC,KAAT,CAAeC,MAAf,EAAuBC,OAAvB,EAAgC;AAC5B,SAAO,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,KAA2B;AAC9B,UAAMC,gBAAgB,GAAG,IAAIT,iBAAiB,CAACU,cAAtB,GAAuCC,OAAvC,CAA+CV,SAA/C,EAA0DW,KAA1D,EAAzB,CAD8B,CAE9B;;AACA,UAAMC,QAAQ,GAAGT,MAAM,CAACU,GAAP,CAAW,MAAOC,KAAP,IAAiB;AACzC,YAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA7C;AACA,YAAMI,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACF,GAAN,CAAUC,KAAK,IAAIA,KAAK,CAACb,GAAN,CAAUI,GAAV,EAAe;AAAEgB,QAAAA,MAAM,EAAE;AAAV,OAAf,CAAnB,CAAZ,CAAvB;;AACA,YAAMC,WAAW,GAAG1B,CAAC,CAAC2B,OAAF,CAAUL,QAAV,EAAoB,QAApB,CAApB,CAHyC,CAIzC;AACA;;;AACA,UAAI,CAACI,WAAW,CAACE,MAAjB,EAAyB;AACrBN,QAAAA,QAAQ,CAACO,OAAT,CAAiBC,OAAO,IAAI;AACxBlB,UAAAA,gBAAgB,CAACmB,iBAAjB,CAAmCD,OAAO,CAACE,OAAR,EAAnC;AACH,SAFD;AAGH;;AACD,aAAON,WAAP;AACH,KAZgB,CAAjB;;AAaA,QAAI;AACA,YAAMO,SAAS,GAAG,MAAMV,OAAO,CAACC,GAAR,CAAYR,QAAZ,CAAxB;AACA,YAAMkB,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAeT,WAAW,IAAIA,WAAW,CAACE,MAAZ,KAAuB,CAArD,CAAhB;;AACA,UAAI,CAACM,OAAL,EAAc;AACV;AACAtB,QAAAA,gBAAgB,CAACwB,QAAjB,CAA0B,OAAO5B,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAAC;AAAEC,UAAAA;AAAF,SAAD,CAAvC,GAAmDD,OAAO,IAAI,kBAAxF,EAA4GR,CAAC,CAAC2B,OAAF,CAAUM,SAAV,CAA5G;AACH,OAND,CAOA;;;AACA,YAAM,IAAI/B,OAAO,CAACmC,iBAAZ,CAA8BzB,gBAA9B,EAAgDP,GAAhD,CAAoDI,GAApD,CAAN;AACAE,MAAAA,IAAI;AACP,KAVD,CAWA,OAAO2B,CAAP,EAAU;AACN3B,MAAAA,IAAI,CAAC2B,CAAD,CAAJ;AACH;AACJ,GA9BD;AA+BH;;AACDxC,OAAO,CAACQ,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst chain_1 = require(\"../chain\");\nconst context_builder_1 = require(\"../context-builder\");\n// A dummy context item that gets added to surrogate contexts just to make them run\nconst dummyItem = { async run() { } };\nfunction oneOf(chains, message) {\n    return async (req, _res, next) => {\n        const surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build();\n        // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n        const promises = chains.map(async (chain) => {\n            const group = Array.isArray(chain) ? chain : [chain];\n            const contexts = await Promise.all(group.map(chain => chain.run(req, { dryRun: true })));\n            const groupErrors = _.flatMap(contexts, 'errors');\n            // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n            // if its entire group is valid.\n            if (!groupErrors.length) {\n                contexts.forEach(context => {\n                    surrogateContext.addFieldInstances(context.getData());\n                });\n            }\n            return groupErrors;\n        });\n        try {\n            const allErrors = await Promise.all(promises);\n            const success = allErrors.some(groupErrors => groupErrors.length === 0);\n            if (!success) {\n                // Only add an error to the context if no group of chains had success.\n                surrogateContext.addError(typeof message === 'function' ? message({ req }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n            }\n            // Final context running pass to ensure contexts are added and values are modified properly\n            await new chain_1.ContextRunnerImpl(surrogateContext).run(req);\n            next();\n        }\n        catch (e) {\n            next(e);\n        }\n    };\n}\nexports.oneOf = oneOf;\n"]},"metadata":{},"sourceType":"script"}