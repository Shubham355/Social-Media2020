{"ast":null,"code":"import axios from 'axios';\nimport { confirmDelete, setAlert } from './alert';\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, UPDATE_DISLIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nimport swal from 'sweetalert'; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add likes\n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        data: res.data\n      }\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Dislikes\n\nexport const dislike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/dislike/${postId}`);\n    dispatch({\n      type: UPDATE_DISLIKES,\n      payload: {\n        postId,\n        data: res.data\n      }\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = postId => async dispatch => {\n  swal({\n    title: 'Are you sure?',\n    text: 'Once deleted, you will not be able to recover this post!',\n    icon: 'warning',\n    buttons: true,\n    dangerMode: true\n  }).then(async willDelete => {\n    if (willDelete) {\n      try {\n        await axios.delete(`/api/posts/${postId}`);\n        dispatch({\n          type: DELETE_POST,\n          payload: postId\n        });\n        dispatch(setAlert('Post Removed', 'success'));\n      } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n          errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n\n        dispatch({\n          type: POST_ERROR,\n          payload: {\n            msg: err.response.statusText,\n            status: err.response.status\n          }\n        });\n      }\n    }\n  });\n}; // Add Post\n\nexport const addPost = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/posts', formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post by id\n\nexport const getPost = postId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${postId}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete comment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/client/src/actions/post.js"],"names":["axios","confirmDelete","setAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","UPDATE_DISLIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","swal","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","postId","put","errors","forEach","error","dislike","deletePost","title","text","icon","buttons","dangerMode","then","willDelete","delete","addPost","formData","config","headers","post","getPost","addComment","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { confirmDelete, setAlert } from './alert';\nimport {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  UPDATE_DISLIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n} from '../actions/types';\nimport swal from 'sweetalert'\n\n// Get posts\nexport const getPosts = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/posts');\n\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add likes\nexport const addLike = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { postId, data: res.data },\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Dislikes\nexport const dislike = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/dislike/${postId}`);\n\n    dispatch({\n      type: UPDATE_DISLIKES,\n      payload: { postId, data: res.data },\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete post\nexport const deletePost = (postId) => async (dispatch) => {\n  swal({\n    title: 'Are you sure?',\n    text: 'Once deleted, you will not be able to recover this post!',\n    icon: 'warning',\n    buttons: true,\n    dangerMode: true,\n  }).then( async (willDelete) => {\n    if(willDelete) {\n      try {\n        await axios.delete(`/api/posts/${postId}`);\n\n        dispatch({\n          type: DELETE_POST,\n          payload: postId,\n        });\n\n        dispatch(setAlert('Post Removed', 'success'));\n      } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n          errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n        }\n\n        dispatch({\n          type: POST_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status },\n        });\n      }\n    }\n  });\n};\n\n\n// Add Post\nexport const addPost = (formData) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.post('/api/posts', formData, config);\n\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get post by id\nexport const getPost = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/posts/${postId}`);\n\n    dispatch({\n      type: GET_POST,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add Comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.post(\n      `/api/posts/comment/${postId}`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete comment\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId,\n    });\n\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}