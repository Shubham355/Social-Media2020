{"ast":null,"code":"import axios from 'axios'; // import { setAlert } from './alert';\n\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, UPDATE_DISLIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nimport swal from 'sweetalert'; // Get current user all posts\n\nexport const getCurrentUserAllPosts = () => async dispatch => {\n  try {} catch (err) {}\n}; // Get all posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add like\n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        data: res.data\n      }\n    });\n  } catch (err) {\n    // const errors = err.response.data.errors;\n    // if (errors) {\n    //   errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    // }\n    // swal({ title: 'Post already liked', icon: 'warning' });\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove like\n\nexport const removeLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/removelike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        data: res.data\n      }\n    });\n  } catch (err) {\n    // const errors = err.response.data.errors;\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Dislike\n\nexport const dislike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/dislike/${postId}`);\n    dispatch({\n      type: UPDATE_DISLIKES,\n      payload: {\n        postId,\n        data: res.data\n      }\n    });\n  } catch (err) {\n    // const errors = err.response.data.errors;\n    // if (errors) {\n    //   errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    // }\n    // swal({ title: 'Post already disliked', icon: 'warning' });\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove Dislike\n\nexport const removeDislike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/removedislike/${postId}`);\n    dispatch({\n      type: UPDATE_DISLIKES,\n      payload: {\n        postId,\n        data: res.data\n      }\n    });\n  } catch (err) {\n    // const errors = err.response.data.errors;\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = postId => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${postId}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: postId\n    });\n    swal({\n      title: 'Post Removed',\n      icon: 'success'\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => swal({\n        title: error.msg,\n        icon: 'error'\n      })); // errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Post\n\nexport const addPost = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/posts', formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    swal({\n      title: 'Post Created',\n      icon: 'success'\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post by id\n\nexport const getPost = postId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${postId}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    swal({\n      title: 'Comment Added',\n      icon: 'success'\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete comment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    swal({\n      title: 'Comment Removed',\n      icon: 'success'\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/client/src/actions/post.js"],"names":["axios","GET_POSTS","POST_ERROR","UPDATE_LIKES","UPDATE_DISLIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","swal","getCurrentUserAllPosts","dispatch","err","getPosts","res","get","type","payload","data","msg","response","statusText","status","addLike","postId","put","removeLike","dislike","removeDislike","deletePost","delete","title","icon","errors","forEach","error","addPost","formData","config","headers","post","getPost","addComment","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from 'axios';\n// import { setAlert } from './alert';\nimport {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  UPDATE_DISLIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n} from '../actions/types';\nimport swal from 'sweetalert';\n\n// Get current user all posts\nexport const getCurrentUserAllPosts = () => async (dispatch) => {\n  try {\n    \n  } catch (err) {\n    \n  }\n}\n\n\n// Get all posts\nexport const getPosts = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/posts');\n\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add like\nexport const addLike = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { postId, data: res.data },\n    });\n  } catch (err) {\n    // const errors = err.response.data.errors;\n\n    // if (errors) {\n    //   errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    // }\n\n    // swal({ title: 'Post already liked', icon: 'warning' });\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Remove like\nexport const removeLike = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/removelike/${postId}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { postId, data: res.data },\n    });\n  } catch (err) {\n    // const errors = err.response.data.errors;\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Dislike\nexport const dislike = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/dislike/${postId}`);\n\n    dispatch({\n      type: UPDATE_DISLIKES,\n      payload: { postId, data: res.data },\n    });\n  } catch (err) {\n    // const errors = err.response.data.errors;\n\n    // if (errors) {\n    //   errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    // }\n\n    // swal({ title: 'Post already disliked', icon: 'warning' });\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Remove Dislike\nexport const removeDislike = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/removedislike/${postId}`);\n\n    dispatch({\n      type: UPDATE_DISLIKES,\n      payload: { postId, data: res.data },\n    });\n  } catch (err) {\n    // const errors = err.response.data.errors;\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete post\nexport const deletePost = (postId) => async (dispatch) => {\n  try {\n    await axios.delete(`/api/posts/${postId}`);\n\n    dispatch({\n      type: DELETE_POST,\n      payload: postId,\n    });\n\n    swal({ title: 'Post Removed', icon: 'success' });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => swal({ title: error.msg, icon: 'error' }));\n      // errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add Post\nexport const addPost = (formData) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.post('/api/posts', formData, config);\n\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    swal({ title: 'Post Created', icon: 'success' });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get post by id\nexport const getPost = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/posts/${postId}`);\n\n    dispatch({\n      type: GET_POST,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add Comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.post(\n      `/api/posts/comment/${postId}`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data,\n    });\n\n    swal({ title: 'Comment Added', icon: 'success' });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete comment\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId,\n    });\n\n    swal({ title: 'Comment Removed', icon: 'success' });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}