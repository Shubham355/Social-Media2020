{"ast":null,"code":"import { GET_POSTS, POST_ERROR, UPDATE_LIKES, UPDATE_DISLIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: action.payload,\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: action.payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== action.payload)\n        }\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: action.payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [action.payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== action.payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: action.payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload.postId ? { ...post,\n          likes: action.payload.data.likes,\n          dislikes: action.payload.data.dislikes\n        } : post),\n        loading: false\n      };\n\n    case UPDATE_DISLIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload.postId ? { ...post,\n          likes: action.payload.data.likes,\n          dislikes: action.payload.data.dislikes\n        } : post),\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/client/src/reducers/post.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","UPDATE_DISLIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","state","action","type","payload","comments","filter","comment","_id","map","postId","likes","data","dislikes"],"mappings":"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","sourcesContent":["import {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  UPDATE_DISLIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n} from '../actions/types';\n\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {},\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n        loading: false,\n      };\n\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: { ...state.post, comments: action.payload },\n        loading: false,\n      };\n\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: { ...state.post, comments: state.post.comments.filter(comment => comment._id !== action.payload) }\n      }\n\n    case GET_POST:\n      return {\n        ...state,\n        post: action.payload,\n        loading: false,\n      };\n\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [action.payload, ...state.posts],\n        loading: false,\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== action.payload),\n        loading: false,\n      };\n\n    case POST_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload.postId\n            ? {\n                ...post,\n                likes: action.payload.data.likes,\n                dislikes: action.payload.data.dislikes,\n              }\n            : post\n        ),\n        loading: false,\n      };\n\n    case UPDATE_DISLIKES:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload.postId\n            ? {\n                ...post,\n                likes: action.payload.data.likes,\n                dislikes: action.payload.data.dislikes,\n              }\n            : post\n        ),\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}