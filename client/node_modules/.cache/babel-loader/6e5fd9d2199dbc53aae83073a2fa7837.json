{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst auth = require('../../middleware/auth');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst Post = require('../../models/Post');\n\nconst Profile = require('../../models/Profile');\n\nconst User = require('../../models/User'); // @route   POST /api/posts\n// @desc    Create a post\n// @access  Private\n\n\nrouter.post('/', [auth, [check('text', 'Text is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    const newPost = new Post({\n      text: req.body.text,\n      name: user.name,\n      avatar: user.avatar,\n      user: req.user.id\n    });\n    await newPost.save();\n    res.json(newPost);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   GET /api/posts\n// @desc    Get all the posts\n// @access  Private\n\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const posts = await Post.find().sort({\n      date: -1\n    });\n    res.json(posts);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   GET /api/posts/:id\n// @desc    Get posts by id\n// @access  Private\n\nrouter.get('/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) {\n      return res.status(404).json({\n        errors: [{\n          msg: 'Post not found'\n        }]\n      });\n    }\n\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n\n    if (err.kind === 'ObjectId') {\n      return res.status(404).json({\n        errors: [{\n          msg: 'Post not found'\n        }]\n      });\n    }\n\n    res.status(500).send('Server Error');\n  }\n}); // @route   DELETE /api/posts/:id\n// @desc    Delete post by id\n// @access  Private\n\nrouter.delete('/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) {\n      return res.status(404).json({\n        errors: [{\n          msg: 'Post not found'\n        }]\n      });\n    } // Check User validation\n\n\n    if (post.user.toString() !== req.user.id) {\n      return res.status(401).json({\n        errors: [{\n          msg: 'User not Authorized'\n        }]\n      });\n    }\n\n    await post.remove();\n    res.json({\n      msg: 'Post Removed'\n    });\n  } catch (err) {\n    console.error(err.message);\n\n    if (err.kind === 'ObjectId') {\n      return res.status(404).json({\n        errors: [{\n          msg: 'Post not found'\n        }]\n      });\n    }\n\n    res.status(500).send('Server Error');\n  }\n}); // @route   PUT /api/posts/like/:id\n// @desc    Like a post\n// @access  Private\n\nrouter.put('/like/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id); // Check if user has already liked the post\n\n    if (post.likes.filter(like => like.user.toString() === req.user.id).length > 0) {\n      return res.status(400).json({\n        errors: [{\n          msg: 'Post already liked'\n        }]\n      });\n    }\n\n    post.likes.unshift({\n      user: req.user.id\n    });\n    await post.save();\n    res.json(post.likes);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   PUT /api/posts/unlike/:id\n// @desc    Unlike a post\n// @access  Private\n\nrouter.put('/unlike/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id); // Check if user hasn't liked the post\n\n    if (post.likes.filter(like => like.user.toString() === req.user.id).length === 0) {\n      return res.status(400).json({\n        errors: [{\n          msg: 'Post has not yet been liked'\n        }]\n      });\n    }\n\n    const removeIndex = post.likes.map(like => like.user.toString()).indexOf(req.user.id);\n    post.likes.splice(removeIndex, 1);\n    await post.save();\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   POST /api/posts/comment/:id\n// @desc    Comment on a post\n// @access  Private\n\nrouter.post('/comment/:id', [auth, [check('text', 'Text is required').not().isEmpty()]], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      errors: errors.array()\n    });\n  }\n\n  try {\n    const post = await Post.findById(req.params.id);\n    const user = await User.findById(req.user.id).select('-password');\n    const newComment = {\n      user: req.user.id,\n      text: req.body.text,\n      name: user.name,\n      avatar: user.avatar\n    };\n    post.comments.unshift(newComment);\n    await post.save();\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   DELETE /api/posts/comment/:post_id/:comment_id\n// @desc    Delete a comment\n// @access  Private\n\nrouter.delete('/comment/:post_id/:comment_id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.post_id); // Pull out comment\n\n    const comment = post.comments.find(comment => comment.id === req.params.comment_id); // Make sure comment exists\n\n    if (!comment) {\n      return res.status(404).json({\n        errors: [{\n          msg: 'Comment dooes not exist'\n        }]\n      });\n    } // Check user\n\n\n    if (comment.user.toString() !== req.user.id) {\n      return res.status(401).json({\n        errors: [{\n          msg: 'User not authorized'\n        }]\n      });\n    } // Get Remove index\n\n\n    const removeIndex = post.comments.map(comment => comment.id).indexOf(req.params.comment_id);\n    post.comments.splice(removeIndex, 1);\n    await post.save();\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/routes/api/posts.js"],"names":["express","require","router","Router","auth","check","validationResult","Post","Profile","User","post","not","isEmpty","req","res","errors","status","json","array","user","findById","id","select","newPost","text","body","name","avatar","save","err","console","error","message","send","get","posts","find","sort","date","params","msg","kind","delete","toString","remove","put","likes","filter","like","length","unshift","removeIndex","map","indexOf","splice","newComment","comments","post_id","comment","comment_id","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst auth = require('../../middleware/auth');\nconst { check, validationResult } = require('express-validator');\n\nconst Post = require('../../models/Post');\nconst Profile = require('../../models/Profile');\nconst User = require('../../models/User');\n\n// @route   POST /api/posts\n// @desc    Create a post\n// @access  Private\nrouter.post(\n  '/',\n  [auth, [check('text', 'Text is required').not().isEmpty()]],\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    try {\n      const user = await User.findById(req.user.id).select('-password');\n\n      const newPost = new Post({\n        text: req.body.text,\n        name: user.name,\n        avatar: user.avatar,\n        user: req.user.id,\n      });\n\n      await newPost.save();\n\n      res.json(newPost);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route   GET /api/posts\n// @desc    Get all the posts\n// @access  Private\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const posts = await Post.find().sort({ date: -1 });\n\n    res.json(posts);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   GET /api/posts/:id\n// @desc    Get posts by id\n// @access  Private\nrouter.get('/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) {\n      return res.status(404).json({ errors: [{ msg: 'Post not found' }]});\n    }\n\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    if (err.kind === 'ObjectId') {\n      return res.status(404).json({ errors: [{ msg: 'Post not found' }]});\n    }\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   DELETE /api/posts/:id\n// @desc    Delete post by id\n// @access  Private\nrouter.delete('/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) {\n      return res.status(404).json({ errors: [{ msg: 'Post not found' }]});\n    }\n\n    // Check User validation\n    if (post.user.toString() !== req.user.id) {\n      return res.status(401).json({ errors: [{ msg: 'User not Authorized' }]});\n    }\n\n    await post.remove();\n\n    res.json({ msg: 'Post Removed' });\n  } catch (err) {\n    console.error(err.message);\n    if (err.kind === 'ObjectId') {\n      return res.status(404).json({ errors: [{ msg: 'Post not found' }]});\n    }\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   PUT /api/posts/like/:id\n// @desc    Like a post\n// @access  Private\nrouter.put('/like/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    // Check if user has already liked the post\n    if (\n      post.likes.filter((like) => like.user.toString() === req.user.id).length >\n      0\n    ) {\n      return res.status(400).json({ errors: [{ msg: 'Post already liked' }]});\n    }\n\n    post.likes.unshift({ user: req.user.id });\n\n    await post.save();\n\n    res.json(post.likes);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   PUT /api/posts/unlike/:id\n// @desc    Unlike a post\n// @access  Private\nrouter.put('/unlike/:id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    // Check if user hasn't liked the post\n    if (\n      post.likes.filter((like) => like.user.toString() === req.user.id)\n        .length === 0\n    ) {\n      return res.status(400).json({ errors: [{ msg: 'Post has not yet been liked' }]});\n    }\n\n    const removeIndex = post.likes\n      .map((like) => like.user.toString())\n      .indexOf(req.user.id);\n\n    post.likes.splice(removeIndex, 1);\n\n    await post.save();\n\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   POST /api/posts/comment/:id\n// @desc    Comment on a post\n// @access  Private\nrouter.post(\n  '/comment/:id',\n  [auth, [check('text', 'Text is required').not().isEmpty()]],\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    try {\n      const post = await Post.findById(req.params.id);\n\n      const user = await User.findById(req.user.id).select('-password');\n\n      const newComment = {\n        user: req.user.id,\n        text: req.body.text,\n        name: user.name,\n        avatar: user.avatar,\n      };\n\n      post.comments.unshift(newComment);\n\n      await post.save();\n\n      res.json(post);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\n// @route   DELETE /api/posts/comment/:post_id/:comment_id\n// @desc    Delete a comment\n// @access  Private\nrouter.delete('/comment/:post_id/:comment_id', auth, async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.post_id);\n\n    // Pull out comment\n    const comment = post.comments.find(\n      (comment) => comment.id === req.params.comment_id\n    );\n\n    // Make sure comment exists\n    if (!comment) {\n      return res.status(404).json({ errors: [{ msg: 'Comment dooes not exist' }]});\n    }\n\n    // Check user\n    if (comment.user.toString() !== req.user.id) {\n      return res.status(401).json({ errors: [{ msg: 'User not authorized' }]});\n    }\n\n    // Get Remove index\n    const removeIndex = post.comments\n      .map((comment) => comment.id)\n      .indexOf(req.params.comment_id);\n\n    post.comments.splice(removeIndex, 1);\n\n    await post.save();\n\n    res.json(post);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"script"}