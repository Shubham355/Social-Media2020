{"ast":null,"code":"const express = require('express');\n\nconst router = express.Router();\n\nconst auth = require('../../middleware/auth');\n\nconst User = require('../../models/User');\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst config = require('config');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator'); // @route   GET /api/auth\n// @desc    Test route with the help of token & give users data\n// @access  Private\n\n\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    res.json(user);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n}); // @route   POST /api/auth\n// @desc    Authenticate user & get token\n// @access  Public\n\nrouter.post('/', [check('email', 'Please enter a valid email').isEmail(), check('password', 'Please enter the password').exists()], async (req, res) => {\n  const errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    // Check if user already exists\n    let user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        errors: [{\n          msg: 'Invalid Credentials'\n        }]\n      });\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n\n    if (!isMatch) {\n      return res.status(400).json({\n        msg: 'Invalid Credentials'\n      });\n    } // Return jsonwebtoken\n\n\n    const payload = {\n      user: {\n        id: user.id\n      }\n    };\n    jwt.sign(payload, config.get('jwtSecret'), {\n      expiresIn: 360000\n    }, (err, token) => {\n      if (err) throw err;\n      res.json({\n        token\n      });\n    });\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/routes/api/auth.js"],"names":["express","require","router","Router","auth","User","bcrypt","jwt","config","check","validationResult","get","req","res","user","findById","id","select","json","err","console","error","message","status","send","post","isEmail","exists","errors","isEmpty","array","email","password","body","findOne","msg","isMatch","compare","payload","sign","expiresIn","token","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst auth = require('../../middleware/auth');\nconst User = require('../../models/User');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst config = require('config');\nconst { check, validationResult } = require('express-validator');\n\n// @route   GET /api/auth\n// @desc    Test route with the help of token & give users data\n// @access  Private\nrouter.get('/', auth, async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select('-password');\n    res.json(user);\n  } catch (err) {\n    console.error(err.message);\n    res.status(500).send('Server Error');\n  }\n});\n\n// @route   POST /api/auth\n// @desc    Authenticate user & get token\n// @access  Public\nrouter.post(\n  '/',\n  [\n    check('email', 'Please enter a valid email').isEmail(),\n    check('password', 'Please enter the password').exists(),\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ error: errors.array() });\n    }\n\n    const { email, password } = req.body;\n\n    try {\n      // Check if user already exists\n      let user = await User.findOne({ email });\n\n      if (!user) {\n        return res\n          .status(400)\n          .json({ errors: [{ msg: 'Invalid Credentials' }] });\n      }\n\n      const isMatch = await bcrypt.compare(password, user.password);\n\n      if (!isMatch) {\n        return res.status(400).json({ msg: 'Invalid Credentials' });\n      }\n\n      // Return jsonwebtoken\n      const payload = {\n        user: {\n          id: user.id,\n        },\n      };\n\n      jwt.sign(\n        payload,\n        config.get('jwtSecret'),\n        { expiresIn: 360000 },\n        (err, token) => {\n          if (err) throw err;\n          res.json({ token });\n        }\n      );\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server Error');\n    }\n  }\n);\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"script"}