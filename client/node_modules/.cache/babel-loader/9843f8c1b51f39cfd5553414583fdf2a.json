{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, UPDATE_DISLIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../actions/types';\nimport swal from 'sweetalert'; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add likes\n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        data: res.data\n      }\n    });\n  } catch (err) {\n    const errors = err.response.data.errors; // if (errors) {\n    //   errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    // }\n\n    swal({\n      title: 'Post already liked',\n      icon: 'warning'\n    });\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Dislikes\n\nexport const dislike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/dislike/${postId}`);\n    dispatch({\n      type: UPDATE_DISLIKES,\n      payload: {\n        postId,\n        data: res.data\n      }\n    });\n  } catch (err) {\n    const errors = err.response.data.errors; // if (errors) {\n    //   errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    // }\n\n    swal({\n      title: 'Post already disliked',\n      icon: 'warning'\n    });\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = postId => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${postId}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: postId\n    });\n    swal({\n      title: 'Post Removed',\n      icon: 'success'\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Post\n\nexport const addPost = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/posts', formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    swal({\n      title: 'Post Created',\n      icon: 'success'\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post by id\n\nexport const getPost = postId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${postId}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    swal({\n      title: 'Comment Added',\n      icon: 'success'\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete comment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    swal({\n      title: 'Comment Added',\n      icon: 'success'\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/shubham/Desktop/Socialmedia_MERN/client/src/actions/post.js"],"names":["axios","setAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","UPDATE_DISLIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","swal","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","postId","put","errors","title","icon","dislike","deletePost","delete","forEach","error","addPost","formData","config","headers","post","getPost","addComment","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  UPDATE_DISLIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n} from '../actions/types';\nimport swal from 'sweetalert';\n\n// Get posts\nexport const getPosts = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/posts');\n\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add likes\nexport const addLike = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { postId, data: res.data },\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    // if (errors) {\n    //   errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    // }\n\n    swal({ title: 'Post already liked', icon: 'warning' });\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Dislikes\nexport const dislike = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.put(`/api/posts/dislike/${postId}`);\n\n    dispatch({\n      type: UPDATE_DISLIKES,\n      payload: { postId, data: res.data },\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    // if (errors) {\n    //   errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    // }\n\n    swal({ title: 'Post already disliked', icon: 'warning' });\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete post\nexport const deletePost = (postId) => async (dispatch) => {\n  try {\n    await axios.delete(`/api/posts/${postId}`);\n\n    dispatch({\n      type: DELETE_POST,\n      payload: postId,\n    });\n\n    swal({ title: 'Post Removed', icon: 'success' });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add Post\nexport const addPost = (formData) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.post('/api/posts', formData, config);\n\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    swal({ title: 'Post Created', icon: 'success' });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Get post by id\nexport const getPost = (postId) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/posts/${postId}`);\n\n    dispatch({\n      type: GET_POST,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Add Comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const res = await axios.post(\n      `/api/posts/comment/${postId}`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data,\n    });\n\n    swal({ title: 'Comment Added', icon: 'success' });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n// Delete comment\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId,\n    });\n\n    swal({ title: 'Comment Added', icon: 'success' });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}